{
    "name": "MO Aramex Shipping Integration",
    "slug": "mo-aramex-shipping-integration",
    "version": "1.0.23",
    "tested": "6.4",
    "requires": "5.3",
    "requires_php": "7.4",
    "last_updated": "2025-01-22",
    "homepage": "https://github.com/MakiOmar/Aramex-Woocommerce-api-integration",
    "author": "Mohammad Omar",
    "author_profile": "https://github.com/MakiOmar",
    "download_url": "https://github.com/MakiOmar/Aramex-Woocommerce-api-integration/archive/refs/heads/master.zip",
    "sections": {
        "description": "Professional Aramex shipping integration for WooCommerce with advanced features. This plugin provides seamless integration with Aramex Express shipping services, allowing you to create shipments, print labels, track orders, and manage bulk operations directly from your WooCommerce store.",
        "installation": "1. Upload the plugin files to the /wp-content/plugins/mo-aramex-shipping-integration directory, or install the plugin through the WordPress plugins screen directly.\n2. Activate the plugin through the 'Plugins' screen in WordPress\n3. Use the WooCommerce > Settings > Shipping > MO Aramex Shipping screen to configure the plugin\n4. Enter your Aramex API credentials to start using the plugin",
        "changelog": "<h4>Version 1.0.23</h4>\n<ul>\n<li>Aligned CreateShipments request structure with working JSON payload</li>\n<li>Changed Items from wrapped 'ShipmentItem' array to flat array with PackageType, Comments, Reference</li>\n<li>Flattened AdditionalProperties to direct array (not wrapped in 'AdditionalProperty')</li>\n<li>Added ChargeableWeight field alongside ActualWeight for compliance</li>\n<li>Updated Dimensions to use numeric values instead of strings</li>\n<li>Removed obsolete PieceDimensions from Details</li>\n<li>Updated Item structure to match API: PackageType, Quantity, Weight, Comments, Reference</li>\n</ul>\n\n<h4>Version 1.0.22</h4>\n<ul>\n<li>Fixed bulk shipment payload to prevent sending empty shipments array</li>\n<li>Ensured ClientInfo and LabelInfo are only included if valid data is present</li>\n<li>Improved error handling for empty shipment data before API call</li>\n</ul>\n\n<h4>Version 1.0.21</h4>\n<ul>\n<li>Re-added ClientInfo.Source parameter to API requests to resolve HTTP 400 errors</li>\n<li>Ensured ClientInfo.Source is set to 52 as required by the Aramex API</li>\n</ul>\n\n<h4>Version 1.0.20</h4>\n<ul>\n<li>Updated CreateShipments to use /Date(ms+offset)/ format for ShippingDateTime and DueDate</li>\n<li>Ensured AdditionalProperties are included only when present and have 'CategoryName'</li>\n</ul>\n\n<h4>Version 1.0.12</h4>\n<ul>\n<li>CRITICAL FIX: Updated Aramex API endpoints to use correct .v2 URLs</li>\n<li>Fixed test WSDL: ws.dev.aramex.net/shippingapi.v2/shipping/service_1_0.svc</li>\n<li>Fixed live WSDL: ws.aramex.net/shippingapi.v2/shipping/service_1_0.svc</li>\n<li>Resolved 'Could not connect to host' errors</li>\n<li>Updated network connectivity test to use correct endpoints</li>\n<li>Added ARAMEX_Test_README.md and ARAMEX_Live_README.md for reference</li>\n<li>Endpoints were missing .v2 in the API path as per official documentation</li>\n</ul>\n\n<h4>Version 1.0.11</h4>\n<ul>\n<li>Added comprehensive network connectivity testing for Aramex servers</li>\n<li>Enhanced SOAP client with proper timeout and SSL configuration</li>\n<li>Added DNS resolution testing for ws.aramex.net and ws-sandbox.aramex.net</li>\n<li>Added port connectivity testing for HTTPS (443)</li>\n<li>Added HTTPS connectivity testing with proper SSL context</li>\n<li>Added cURL functionality testing</li>\n<li>Improved error handling for network-related issues</li>\n<li>Enhanced troubleshooting for 'Could not connect to host' errors</li>\n</ul>\n\n<h4>Version 1.0.10</h4>\n<ul>\n<li>Added comprehensive debugging for bulk shipment API calls</li>\n<li>Enhanced SOAP client creation error handling</li>\n<li>Added detailed exception logging with stack traces</li>\n<li>Improved API response logging debugging</li>\n<li>Added logging for WSDL URL and request data</li>\n<li>Enhanced error tracking for troubleshooting API issues</li>\n</ul>\n\n<h4>Version 1.0.9</h4>\n<ul>\n<li>Fixed WooCommerce 3.0+ deprecation warnings</li>\n<li>Replaced direct order property access with getter methods</li>\n<li>Updated all order property calls to use modern WooCommerce API</li>\n<li>Improved compatibility with latest WooCommerce versions</li>\n<li>Eliminated 'Order properties should not be accessed directly' warnings</li>\n</ul>\n\n<h4>Version 1.0.8</h4>\n<ul>\n<li>Removed automatic bulk shipment form submission</li>\n<li>Users now must manually click 'Create Bulk Shipment' button</li>\n<li>Provides better control over shipment creation process</li>\n<li>Prevents accidental submissions</li>\n</ul>\n\n<h4>Version 1.0.7</h4>\n<ul>\n<li>Fixed multiple fatal errors that were preventing plugin activation</li>\n<li>Corrected settings file path in shipping method class</li>\n<li>Fixed incorrect include path in bulk class (../../core/ -> ../core/)</li>\n<li>Updated Aramex_Helper references to MO_Aramex_Helper in bulk class</li>\n<li>Added missing getInfo() method to MO_Aramex_Helper class</li>\n<li>Fixed class loading order issues that were causing fatal errors</li>\n<li>Ensured all required classes are loaded before they're used</li>\n<li>Improved plugin stability and reliability</li>\n</ul>\n\n<h4>Version 1.0.6</h4>\n<ul>\n<li>Added enhanced debugging for AJAX registration and execution</li>\n<li>Fixed constructor to call parent::__construct() for proper initialization</li>\n<li>Added test AJAX action to verify AJAX registration functionality</li>\n<li>Added error_log to run method to verify method execution</li>\n<li>Added test AJAX call in frontend to verify AJAX functionality</li>\n<li>Enhanced debugging to identify AJAX registration issues</li>\n<li>Added logging to load_aramex_classes method for troubleshooting</li>\n<li>Improved class instantiation and method execution verification</li>\n</ul>\n\n<h4>Version 1.0.5</h4>\n<ul>\n<li>Added comprehensive debugging for bulk shipment AJAX 400 error</li>\n<li>Enhanced AJAX action registration with immediate loading</li>\n<li>Added frontend JavaScript console logging for debugging</li>\n<li>Added AJAX error handling with detailed error messages</li>\n<li>Added constructor logging to bulk class for troubleshooting</li>\n<li>Enhanced debugging to identify why run() method is not executing</li>\n<li>Added console logging for AJAX request data and responses</li>\n<li>Improved AJAX registration timing for better reliability</li>\n</ul>\n\n<h4>Version 1.0.4</h4>\n<ul>\n<li>Fixed the_aramex_bulk AJAX 400 error by correcting nonce verification</li>\n<li>Added missing formatPost method to MO_Aramex_Helper class</li>\n<li>Enhanced debugging with detailed logging for bulk shipment requests</li>\n<li>Fixed nonce verification for AJAX requests (use wp_verify_nonce instead of check_admin_referer)</li>\n<li>Added user ID and email logging for troubleshooting</li>\n<li>Improved bulk shipment functionality with proper data formatting</li>\n<li>Enhanced error handling and logging for bulk operations</li>\n<li>Fixed data sanitization and validation for bulk shipment forms</li>\n</ul>\n\n<h4>Version 1.0.3</h4>\n<ul>\n<li>Fixed PHP Fatal error with getVcsApi() method for custom update servers</li>\n<li>Enhanced admin notice to properly handle custom update server detection</li>\n<li>Updated debug class with proper error handling for VCS API calls</li>\n<li>Added method existence checks to prevent fatal errors</li>\n<li>Improved update checker compatibility with custom update servers</li>\n<li>Enhanced debugging information display for different update server types</li>\n<li>Fixed admin notice display on debug page</li>\n<li>Added graceful fallbacks when VCS API methods are not available</li>\n</ul>\n\n<h4>Version 1.0.2</h4>\n<ul>\n<li>Added comprehensive logging system for all Aramex API calls</li>\n<li>Created date-organized log files (aramex-log-22-9-2025.log format)</li>\n<li>Implemented admin interface for log management and viewing</li>\n<li>Added request/response logging with execution time tracking</li>\n<li>Integrated logging into all API endpoints: CreateShipments, PrintLabel, CalculateRate, TrackShipments, CreatePickup</li>\n<li>Added error logging with detailed context information</li>\n<li>Implemented automatic log rotation and cleanup</li>\n<li>Added security features: .htaccess protection and sensitive data sanitization</li>\n<li>Separate logging system from WordPress debug logs</li>\n<li>Enhanced debugging capabilities for API issues</li>\n<li>Added performance monitoring with memory usage tracking</li>\n<li>Created convenient helper functions for manual logging</li>\n</ul>\n\n<h4>Version 1.0.1</h4>\n<ul>\n<li>Fixed duplicate update checker URLs</li>\n<li>Resolved 404 errors in update checker</li>\n<li>Fixed AJAX 400 errors in bulk shipment</li>\n<li>Fixed PHP Fatal error with setHttpFilter method</li>\n<li>Improved error handling and logging</li>\n<li>Enhanced debug page functionality</li>\n<li>Added comprehensive debugging tools</li>\n<li>Improved bulk shipment error handling</li>\n<li>Set default values for bulk forms</li>\n<li>Auto-submit functionality for forms</li>\n<li>Removed conflicting updater class</li>\n<li>Proper GitHub repository integration</li>\n<li>Enhanced error handling with try-catch blocks</li>\n<li>Added custom logging for debugging</li>\n</ul>\n\n<h4>Version 1.0.0</h4>\n<ul>\n<li>Initial white-labeled release</li>\n<li>Complete rebranding from original Aramex plugin</li>\n<li>Enhanced security features</li>\n<li>Plugin update checker integration</li>\n<li>Performance optimizations</li>\n<li>Professional admin interface</li>\n<li>Comprehensive documentation</li>\n</ul>",
        "faq": "<h4>How do I get Aramex API credentials?</h4>\n<p>Please contact Mohammad Omar at maki3omar@gmail.com to obtain your Aramex API account credentials.</p>\n\n<h4>Does this plugin work with all WooCommerce themes?</h4>\n<p>Yes, this plugin is designed to work with any WordPress theme that supports WooCommerce.</p>\n\n<h4>Can I use this plugin for multiple stores?</h4>\n<p>Yes, you can use the same plugin installation for multiple stores, but each store will need its own Aramex API credentials.</p>\n\n<h4>What are the system requirements?</h4>\n<p>WordPress 5.3+, WooCommerce 3.0+, PHP 7.4+, and SOAP extension enabled.</p>"
    },
    "banners": {
        "low": "https://github.com/MakiOmar/Aramex-Woocommerce-api-integration/raw/master/assets/banner-1544x500.png",
        "high": "https://github.com/MakiOmar/Aramex-Woocommerce-api-integration/raw/master/assets/banner-1544x500.png"
    }
}
